smem --set learning on 
rl -s learning on 
indiff -b  

# Initialization operator
sp {propose*initialize-eater
   (state <s> ^superstate nil
             -^name)
-->
   (<s> ^operator <o> +)
   (<o> ^name eater)
}

sp {apply*initialize-eater
   (state <s> ^operator <op>)
   (<op> ^name eater)
-->
   (<s> ^name eater
        ^direction north south east west)
}

# cleans the output-link once commands complete
sp {apply*cleanup*output-link
   (state <s> ^operator <op>
              ^superstate nil
              ^io.output-link <out>)
   (<out> ^<cmd> <id>)
   (<id> ^status)
-->
   (<out> ^<cmd> <id> -)
}

# misc useful elaboration rules
sp {elaborate*state*name
   (state <s> ^superstate.operator.name <name>)
-->
   (<s> ^name <name>)
}

sp {elaborate*state*top-state
   (state <s> ^superstate.top-state <ts>)
-->
   (<s> ^top-state <ts>)
}

sp {elaborate*top-state*top-state
   (state <s> ^superstate nil)
-->
   (<s> ^top-state <s>)
}

sp {elaborate*state*io
   (state <s> ^superstate.io <io>)
-->
   (<s> ^io <io>)
}

####

sp {end
   (state <s> ^io.input-link.food-remaining 0
             -^store-me)
-->
   (halt)
}

sp {propose*move
   (state <s> ^name eater
              ^direction <d>
              ^io.input-link.<d> <contents> <> wall)
-->
   (<s> ^operator <op> +)
   (<op> ^name move
         ^direction <d>
         ^contents <contents>)
}

sp {eater*elaborate*move-tie
   (state <s> ^impasse tie
              ^attribute operator
              ^choices multiple
              ^superstate.name eater)
-->
   (<s> ^name move-tie)
}

sp {propose*move-tie*evaluate
   (state <s> ^name move-tie
              ^item <ss-op>
             -^evaluated.name <contents>)
   (<ss-op> ^direction <d>
            ^contents <contents>)
-->
   (<s> ^operator <op> + =)
   (<op> ^name evaluate
         ^contents <contents>)
}

sp {propose*evaluate*query
   (state <s> ^name evaluate
             -^smem.command.query)
-->
   (<s> ^operator <op> + =)
   (<op> ^name query)
}

sp {apply*query
   (state <s> ^operator <op>
              ^smem.command <cmd>
              ^superstate.operator.contents <c>)
   (<op> ^name query)
-->
   (<cmd> ^query.name <c>)
}

sp {propose*evaluate*result
   (state <s> ^name evaluate
              ^smem.result.<status>)
-->
   (<s> ^operator <op> + =)
   (<op> ^name result)
}

sp {apply*result*failure
   (state <s> ^operator <op>
              ^smem <smem>
              ^superstate <ss>
              ^quiescence t)
   (<ss> ^operator <ss-op>)
   (<op> ^name result)
   (<smem> ^result.failure
           ^command.query.name <color>)
-->
   (<ss> ^evaluated <e>)
   (<e> ^name <color>
        ^found f
        ^value 0)
}

sp {apply*result*success
   (state <s> ^operator <op>
              ^smem <smem>
              ^superstate <ss>)
   (<ss> ^operator <ss-op>)
   (<op> ^name result)
   (<smem> ^result <result>
           ^command.query.name <color>)
   (<result> ^success
             ^retrieved.value <v>)
-->
   (<ss> ^evaluated <e>)
   (<e> ^name <color>
        ^found t
        ^value <v>)
}

sp {propose*move-tie*copy
   (state <s> ^name move-tie)
-->
   (<s> ^operator <op> + <)
   (<op> ^name copy)
}

sp {apply*copy
   (state <s> ^operator <op>
              ^superstate <ss>
              ^item <ss-op>
              ^evaluated <e>)
   (<op> ^name copy)
   (<ss-op> ^contents <contents>)
   (<e> ^name <contents>
        ^value <v>)
-->
   (<ss> ^operator <ss-op> = <v>)
}

sp {apply*copy*found
   (state <s> ^operator <op>
              ^superstate <ss>
              ^evaluated <e>)
   (<op> ^name copy)
   (<e> ^name <contents>
        ^found <f>)
-->
   (<ss> ^evaluated <e2>)
   (<e2> ^name <contents> 
         ^found <f>)
}

sp {propose*move*rotate
   (state <s> ^name move
              ^superstate <ss>)
   (<ss> ^operator <ss-op>
         ^io.input-link.orientation <dir>)
   (<ss-op> ^direction <> <dir>)
-->
   (<s> ^operator <op> + =)
   (<op> ^name rotate)
}

sp {apply*rotate
   (<s> ^operator.name rotate
        ^superstate.io.output-link <out>)
  -(<out> ^rotate)
-->
   (<out> ^rotate <r>)
}

sp {propose*move*forward
   (state <s> ^name move
              ^superstate <ss>)
   (<ss> ^operator <ss-op>
         ^io.input-link.orientation <dir>)
   (<ss-op> ^direction <dir>)
-->
   (<s> ^operator <op> + =)
   (<op> ^name forward)
}

sp {apply*forward
   (<s> ^operator.name forward
        ^superstate.io.output-link <out>)
  -(<out> ^forward)
-->
   (<out> ^forward <r>)
}

sp {apply*forward*reminder
   (<s> ^operator.name forward
        ^superstate <ss>)
   (<ss> ^io.input-link.front <contents>
         ^evaluated <e>)
   (<e> ^name <contents> 
        ^found f)
-->
   (<ss> ^store-me <contents>)
}

sp {apply*forward*nix-evaluated
   (<s> ^operator.name forward
        ^superstate <ss>)
   (<ss> ^io.input-link.front <contents>
         ^evaluated <e>)
-->
   (<ss> ^evaluated <e> -)
}

sp {propose*store
   (state <s> ^name eater
              ^store-me)
-->
   (<s> ^operator <op> + >)
   (<op> ^name store)
}

sp {apply*store
   (state <s> ^operator.name store
              ^store-me <contents>
              ^smem.command <cmd>
              ^io.input-link.score-diff <v>)
-->
   (<cmd> ^store <newbie>)
   (<newbie> ^name <contents>
             ^value <v>)
   (<s> ^store-me <contents> -)
}

# cleans the smem link
sp {apply*clean*smem
   (state <s> ^operator <op>
              ^smem <smem>)
   (<smem> ^command <cmd>
           ^result.success <store>)
   (<cmd> ^store <store>)
-->
   (<cmd> ^store <store> -)
}
